#!/bin/bash
#
# Copyright 2016, 2024 Greg Kroah-Hartman <gregkh@linuxfoundation.org>
#
# Released under the GPL version 2 only.
# SPDX-License-Identifier: GPL-2.0
#
# Count the lines of kernel code that we are actually using for our machine
#
# Run this in a Linux kernel source directory where you have built the
# kernel already.
#
# This script will go through and find all of the .o files in your tree,
# try to match them up with the .c files, parse the .c files to find the
# .h files that they use, then parse the .h files to see what they use.
# Then count up all of the lines of these .c and .h files.
#
# Yes, it's a horrid hack.  But it gives a good estimate of how much
# code you are using.
# Yes, we should probably run another loop on the .h files that the
# original .h files included, but it's a bit of diminishing returns at
# that point in time, so we can live with it.
#

# don't use unset variables
set -o nounset

# set where the tool was run from,
# the name of our script,
# and the git version of it
DIR="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"
SCRIPT=${0##*/} 
SCRIPT_VERSION=$(cd "${DIR}" && git ls-tree --abbrev=12 HEAD | grep "${SCRIPT}" | awk '{print $3}' | head -n 1)

# default values
ARCH="x86"
SRC_DIR="."
OBJ_DIR="."


help() {
	echo "Usage: ${SCRIPT} [OPTIONS]"
	echo "Count the lines of kernel code that we are actually using for a given build."
	echo ""
	echo "Arguments:"
	echo " --arch=ARCH		The arch to use, default is \"${ARCH}\""
	echo " --source=DIRECTORY	The kernel source directory, default is \"${SRC_DIR}\""
	echo " --objects=DIRECTORY	The kernel objects directory (where the build happened), default is \"${OBJ_DIR}\""
	echo " --tmp=DIRECTORY	Temporary directory to use for scratch files, default is \"${TMPDIR}\""
	echo " --help			This information"
	exit 1
}


for arg in "$@"; do
	case $arg in
		--arch=*)
			ARCH="${arg#*=}"
			shift
			;;
		--source=*)
			SRC_DIR="${arg#*=}"
			shift
			;;
		--objects=*)
			OBJ_DIR="${arg#*=}"
			shift
			;;
		--tmp=*)
			TMPDIR="${arg#*=}"
			shift
			;;
		--help=*)
			help
			;;
		*)
			echo "Invalid option '${arg}'"
			help
			;;
	esac
done

echo "Finding files for arch	${ARCH}"
echo "Source directory =	${SRC_DIR}"
echo "Object directory =	${OBJ_DIR}"
echo "Temp directory =	${TMPDIR}"

# can specify the arch on the command line, otherwise default to x86
#if [ $# -ne 1 ]; then
#	ARCH="x86"
#else
#	ARCH=$1
#fi
#echo "Finding files for arch ${ARCH}"

# Don't touch anything below here.
SCRIPT=${0##*/}
TOTAL_LINES=0

find_includes() {
	FILES=$1		# files to look at
	INCLUDES=$2		# where to write the includes we find

	printf "FILES=%s\tINCLUDES=%s\tSRC_DIR=%s\n" "${FILES}" "${INCLUDES}" "${SRC_DIR}"

	pushd .
	cd "${SRC_DIR}"

	# iterate over all files and try to find the includes
	while read -r FILE ; do
		echo -n "file=${FILE}	"
		if [ -f "${FILE}" ]; then
			echo "found!"
			# find all of the .h files this file used
			#  search for include         remove after "         remove after >       remove all of the ../  remove #include   remove whitespace    remove ""    remove <  remove >
			grep "^#include" "${FILE}" | sed -e 's/\.h".*$/\.h"/' -e 's/\.h>.*$/\.h>/' -e 's/\.\.\///g'  -e 's/#include//'  -e 's/[[:blank:]]//g' -e 's/"//g' -e 's/<//g' -e 's/>//g' >> "${INCLUDES}"
		else
			echo "not found!"
		fi
	done < "${FILES}"

	# sort and try to clean up the list of includes
	TMP=$(mktemp "${TMPDIR}/${SCRIPT}"_tmp.XXXX) || exit 1
	sort "${INCLUDES}" | uniq > "${TMP}"
	echo "pwd=${PWD} mv ${TMP} ${INCLUDES}"
	mv "${TMP}" "${INCLUDES}"

	# find the "real" .h file based on the list we now have
	while read -r FILE ; do
		#printf "looking for %s\n" "${FILE}"
		F=$(grep -F "${FILE}" "${FIND}")
		echo "${F}" >> "${TMP}"
	done < "${INCLUDES}"

	# sort the list again
	TMP2=$(mktemp "${TMPDIR}/${SCRIPT}"_tmp2.XXXX) || exit 1
	sort "${TMP}" | uniq > "${TMP2}"
	mv "${TMP2}" "${TMP}"

	rm "${INCLUDES}"
	touch "${INCLUDES}"
	# only take the include files and arch/${ARCH}
	while read -r FILE ; do
		if [[ ${FILE} == "./include/"* ]] ; then
			echo "${FILE}" >> "${INCLUDES}"
		fi

		if [[ ${FILE} == "./arch/${ARCH}/"* ]] ; then
			echo "${FILE}" >> "${INCLUDES}"
		fi
	done < "${TMP}"

	rm "${TMP}"

	popd
}

count_lines() {
	FILES=$1
	while read -r FILE ; do
		if [ -f "${FILE}" ]; then
			LINES=$(wc -l "${FILE}" | cut -f 1 -d ' ')
			TOTAL_LINES=$((LINES + TOTAL_LINES))
			#printf "total=%08d\tlines=%06d\t%s\n" ${TOTAL_LINES} "${LINES}" "${FILE}"
		fi
	done < "${FILES}"
}


# make some temp files to mess around with
C_FILES=$(mktemp "${TMPDIR}/${SCRIPT}"_c_files.XXXX) || exit 1
C_INCLUDES=$(mktemp "${TMPDIR}/${SCRIPT}"_c_includes.XXXX) || exit 1
H_INCLUDES=$(mktemp "${TMPDIR}/${SCRIPT}"_h_includes.XXXX) || exit 1
REAL_INCLUDES=$(mktemp "${TMPDIR}/${SCRIPT}"_real_includes.XXXX) || exit 1
FIND=$(mktemp "${TMPDIR}/${SCRIPT}"_find.XXXX) || exit 1

#echo "${FIND}"


# -----------------start here!------------------
printf "Finding all .c files used based on the .o files...\n"
f=$(cd ${OBJ_DIR} && find . -type f)
echo "${f}" > "${FIND}"
#find ${OBJ_DIR} -type f > "${FIND}"

# first get the object files and strip off the .o and replace it with a .c
# to find the .c files we want to count.
#find . -type f | grep "\.o$" | sed -e 's/\.o$/\.c/' > "${C_FILES}"
grep "\.o$" "${FIND}" | sed -e 's/\.o$/\.c/' > "${C_FILES}"

# find all of the include files these .c files pull in
printf "Searching for what .h files the .c code pulls in...\n"
find_includes "${C_FILES}" "${C_INCLUDES}"

# find all of the include files these .h files pull in
printf "Searching for what .h files the .h files pull in...\n"
find_includes "${C_INCLUDES}" "${H_INCLUDES}"

# squish the includes together and sort to get a real list of included files
cat "${C_INCLUDES}" "${H_INCLUDES}" | sort | uniq > "${REAL_INCLUDES}"

# count the lines that we have in .c code
count_lines "${C_FILES}"
C_LINE_COUNT=${TOTAL_LINES}
C_FILE_COUNT=$(wc -l ${C_FILES} | cut -f 1 -d ' ')

printf "     C: %9d files\t%9d lines\n" ${C_FILE_COUNT} ${C_LINE_COUNT}

# count the lines of .h files
TOTAL_LINES=0
count_lines "${REAL_INCLUDES}"
H_LINE_COUNT=${TOTAL_LINES}
H_FILE_COUNT=$(wc -l ${REAL_INCLUDES} | cut -f 1 -d ' ')

printf "     H: %9d files\t%9d lines\n" ${H_FILE_COUNT} ${H_LINE_COUNT}

TOTAL_LINES=$((C_LINE_COUNT + H_LINE_COUNT))
TOTAL_FILES=$((C_FILE_COUNT + H_FILE_COUNT))

printf "Totals: %9d files\t%9d lines\n" ${TOTAL_FILES} ${TOTAL_LINES}

#rm "${C_FILES}"
#rm "${C_INCLUDES}"
#rm "${H_INCLUDES}"
#rm "${REAL_INCLUDES}"
#rm "${FIND}"

exit 0
