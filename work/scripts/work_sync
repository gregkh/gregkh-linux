#!/bin/bash

# colors!
txtund=$(tput sgr 0 1)    # Underline
txtbld=$(tput bold)       # Bold
txtred=$(tput setaf 1)    # Red
txtgrn=$(tput setaf 2)    # Green
txtylw=$(tput setaf 3)    # Yellow
txtblu=$(tput setaf 4)    # Blue
txtpur=$(tput setaf 5)    # Purple
txtcyn=$(tput setaf 6)    # Cyan
txtwht=$(tput setaf 7)    # White
txtrst=$(tput sgr0)       # Text reset

CURRENT_BRANCH=$(git symbolic-ref --short -q HEAD)

PWD=$(pwd)
TREE=$(basename "${PWD}")

# Old manual way:
#
#git checkout work-linus   && git merge ${TREE}-linus
#git checkout work-next    && git merge ${TREE}-next
#git checkout work-testing && git merge ${TREE}-testing
#exit

# Dynamically only sync the branches that are not the same

branches=("linus" "next" "testing")
for branch in ${branches[@]}; do
	root_id=$(git for-each-ref refs/heads/${TREE}-${branch} | awk '{print $1}')
	branch_id=$(git for-each-ref refs/heads/work-${branch} | awk '{print $1}')
	#echo "TREE=${TREE}	root_id=${root_id}	branch_id=${branch_id}"
	if [[ "${root_id}" != "${branch_id}" ]]; then
		text="${txtcyn}Syncing${txtrst} ${txtgrn}${branch}${txtrst}"
		gum spin --title="${text}" --align=right --show-output -s minidot -- git checkout work-${branch} && git merge ${TREE}-${branch}
		echo "Branch ${txtgrn}${branch}${txtrst} ${txtcyn}now synced${txtrst}"
	else
		echo "Branch ${txtgrn}${branch}${txtrst} ${txtcyn}already synced${txtrst}"
	fi

done

# Go back to the branch we started on
git checkout --quiet ${CURRENT_BRANCH}
exit


